;-------------------------------------------------------------------------
;  65c02 Breadboard project
;-------------------------------------------------------------------------

;-------------------------------------------------------------------------
;  Physical mappings
;  $0 - $FF Zero Page
;  $0 = RTC seconds
;  $1 = RTC minutes
;  $2 = RTC hours
;  $10 = string memory address pointer low byte
;  $11 = string memory address pointer high byte
; 
;  $0100-$01FF Stack
;  $0200-$3FFF RAM
;  $6000-$600F VIA #1
;  $8000-$FFFF ROM
;-------------------------------------------------------------------------

PORTB 		= $6000
PORTA 		= $6001
DDRB 		= $6002
DDRA 		= $6003
T2CL 		= $6008
T2CH 		= $6009
SR 			= $600A
ACR 		= $600B
PCR 		= $600C
IFR 		= $600D
IER 		= $600E


;-------------------------------------------------------------------------
;  Constants
;-------------------------------------------------------------------------

LCD_NUM_MASK 	= %00110000

LCD_E  		= %10000000
LCD_RW 		= %01000000
LCD_RS 		= %00100000
LCD_BUSY    = %00001000

SR_IDLE 	= %00000011 	; No conversion triggered, SR in parallel listen mode
SR_CONVERT  = %00000001
SR_LATCH 	= %00000010

DDRA_BITS 	= %11100011
DDRB_BITS 	= %00001111


;-------------------------------------------------------------------------
;  Set assembler location counter to match current memory mapping
;-------------------------------------------------------------------------

				.org $8000 				; Location counter $8000, start of ROM


;-------------------------------------------------------------------------
;  Reset vector
;-------------------------------------------------------------------------

RESET:			SEI 					; Disable interrupts for the duration of reset sequence
  					
  				; Initialize VIA	
  				LDA #DDRA_BITS			; Top 3 and lowest pin on A to output
  				STA DDRA	
  				STZ PORTA	
					
  				LDA #DDRB_BITS			; Low 4 pins on port B to output
  				STA DDRB	
  				STZ PORTB	
					
  				LDA #%00101000			; Disable T1, count down T2 with PB6 pulses, SR = input under PHI2, disable latching
  				STA ACR	
  				LDA #%10100000 			; Set VIA interrupt #5 = T2 ISR
  				STA IER	
					
  				; Initialize LCD	
  				JSR INIT_LCD 			; Puts LCD into 4-bit mode and clears it
					
  				LDA #>wstring	
  				STA $11	
  				LDA #<wstring	
  				STA $10	
  				JSR LCD_P_STR	
					
  				LDA #15 				; T2CL 15 = 1s delay
  				STA T2CL	
  				STZ T2CH
  				WAI
				
  				LDA #%00000001			; Clear display
  				JSR LCD_CMD_4B	
  				JSR WAIT_LCD 			; LCD is busy after op
				
  				LDA #>titlestring
  				STA $11
  				LDA #<titlestring
  				STA $10
  				JSR LCD_P_STR  
				
  				; Initialize RTC - VIA T2 to give 1s interrupts:
  				STZ $0					; Zero RTC count
  				STZ $1
  				STZ $2
				
  				LDA #15 				; Init T2 low byte with 15 to get 1s interrupts - RTC runs at 8Hz
  				STA T2CL	
  				STZ T2CH				; No need for high byte, but write it to reset VIA ISR bit
  				CLI 					; Enable interrupts


;-------------------------------------------------------------------------
;  Main loop
;-------------------------------------------------------------------------

LOOP:			JSR GET_ADC 			; Read out data in SR and print it			
  				JSR P_TEMP_C 			; Print using calibration table
  				LDA #%11011111 			; Special symbol 'Â°'
  				JSR LCD_PRINT
  				LDA #'C'
  				JSR LCD_PRINT
				
  				LDA #%00010100			; Move display to the right (space)
  				JSR LCD_CMD_4B
				
  				LDA $2 					; Get RTC seconds and print them
  				JSR LCD_P_INT2
  				LDA #'h'
  				JSR LCD_PRINT
				
  				LDA $1 					; Get RTC seconds and print them
  				JSR LCD_P_INT2
  				LDA #'m'
  				JSR LCD_PRINT
					
  				LDA $0 					; Get RTC seconds and print them
  				JSR LCD_P_INT2
  				LDA #'s'
  				JSR LCD_PRINT
					
  				LDX #16 				; Move display to the left X times
.lp0:			DEX
  				LDA #%00010000			; Cursor left
  				JSR LCD_CMD_4B
  				CPX #0
  				BNE .lp0
					
  				JMP LOOP


;-------------------------------------------------------------------------
;  IRQ vector, runs on hardware interrupt (VIA)
;-------------------------------------------------------------------------

IRQ: 			PHA
  				INC $0 					; Increment seconds in RTC count
  				LDA $0	
  				CMP #60	
  				BCC .irq0 				; Branch if seconds value under 60
  				SBC #60	
  				STA $0	
  				INC $1					; Increment minutes in RTC count
  				LDA $1				
  				CMP #60	
  				BCC .irq0				; Branch if minutes value under 60
  				SBC #60
  				STA $1
  				INC $2

.irq0:			LDA #15 				; T2 low byte = 15 to get 1s interrupts
  				STA T2CL	
  				STZ T2CH				; No need for high byte, but write it to reset VIA ISR bit
  				PLA
  				RTI


;-------------------------------------------------------------------------
;  NMI vector, runs on hardware non-maskable interrupt (Teensy subsystem)
;-------------------------------------------------------------------------

NMI: 			RTI


;-------------------------------------------------------------------------
;  Subroutine to print a string, addressed indirectly, pointer at $10, $11
;-------------------------------------------------------------------------

LCD_P_STR:		LDY #0 					; Use Y to index through chars
.lpstr0: 		LDA ($10),Y 			; Print individual char
  				CMP #255
  				BEQ .lpstr1 			; Print finished if terminating char 255 found
  				JSR LCD_PRINT
  				INY
  				JMP .lpstr0 			
.lpstr1:		RTS


;-------------------------------------------------------------------------
;  Subroutine to print a temperature in Celsius, with raw value in A
;-------------------------------------------------------------------------

P_TEMP_C:		TAX
  				PHA
  				LDA LUT_ADC_int, X
  				JSR LCD_P_INT2
  				LDA #'.'
  				JSR LCD_PRINT
  				PLA
  				TAX
  				LDA LUT_ADC_dec, X
  				ORA #LCD_NUM_MASK
  				JSR LCD_PRINT
  				RTS


;-------------------------------------------------------------------------
;  Subroutine to get/read ADC values through HW a shift register
;-------------------------------------------------------------------------

GET_ADC:		LDA #SR_IDLE 			; SR to parallel (listen) mode, ADC idling
  				STA PORTA
  				LDA #SR_CONVERT 		; WD low for min. 600 ns triggers conversion on ADC, keep SR listening 
  				STA PORTA 
  				LDA #SR_IDLE			; WR high again, ADC has data available in 600 ns from now, SR listening
  				STA PORTA
  				LDA #SR_LATCH			; Latch SR, serial mode
  				STA PORTA
  				LDA SR 					; Read SR from previous round. This triggers new async SR read
  				RTS


;-------------------------------------------------------------------------
;  Subroutine to wait for LCD busy flag to clear
;-------------------------------------------------------------------------

WAIT_LCD:		STZ DDRB         		; Set all pins on PORTB to input
				LDA #SR_IDLE
				STA PORTA 				; Clear all LCD (RS/RW/E) bits

.lbw0: 		 	LDA #(LCD_RW | SR_IDLE)
  				STA PORTA
  				LDA #(LCD_E | LCD_RW | SR_IDLE)
  				STA PORTA
                LDA PORTB             	; Load LCD data register (with busy flag) into A
                PHA 					; Then cycle E again to dump out the AC registers
				LDA #(LCD_RW | SR_IDLE)
  				STA PORTA
  				LDA #(LCD_E | LCD_RW | SR_IDLE)
  				STA PORTA
 				PLA
                AND #LCD_BUSY         	; Mask the LCD busy bit flag
                BNE .lbw0        	 	; If busy bit is NOT clear we repeat check

  				LDA #SR_IDLE 			; Clear all LCD (RS/RW/E) bits
  				STA PORTA 
                LDA #DDRB_BITS         	; Set PORTB to normal direction
                STA DDRB
                RTS


;-------------------------------------------------------------------------
;  Subroutine to do a delay that takes more than 1000 CPU cycles
;-------------------------------------------------------------------------

DELAY:			LDX #255
.d1:			DEX
  				CPX #0
  				BNE .d1 
  				RTS


;-------------------------------------------------------------------------
;  Subroutine to send a command to LCD, 8-bit mode, used for init only
;-------------------------------------------------------------------------

LCD_CMD_8B:		STA PORTB
  				LDA #SR_IDLE 			; Clear all LCD (RS/RW/E) bits
  				STA PORTA 
  				LDA #(LCD_E | SR_IDLE)	; Set E bit to send instruction
  				STA PORTA
  				LDA #SR_IDLE 			; Clear all LCD (RS/RW/E) bits
  				STA PORTA 
  				RTS


;-------------------------------------------------------------------------
;  Subroutine to send a command to LCD, 4-bit mode
;-------------------------------------------------------------------------

LCD_CMD_4B:		PHA 					; First send 4 MSB
  				LSR A
  				LSR A
  				LSR A
  				LSR A
  				AND #%00001111
  				STA PORTB
  				LDA #SR_IDLE
  				STA PORTA 				; Clear RS/RW/E bits
  				LDA #(LCD_E | SR_IDLE) 	; Set E bit to send instruction
  				STA PORTA
  				LDA #SR_IDLE
  				STA PORTA 				; Clear RS/RW/E bits
  				PLA 					; Then send 4 LSB
  				AND #%00001111
  				STA PORTB
  				LDA #(LCD_E | SR_IDLE) 	; Set E bit to send instruction
  				STA PORTA
  				LDA #SR_IDLE
  				STA PORTA 				; Clear RS/RW/E bits
  				RTS


;-------------------------------------------------------------------------
;  Subroutine to print whatever to LCD
;-------------------------------------------------------------------------

LCD_PRINT:		PHA  					; First send 4 MSB
  				LSR A
  				LSR A
  				LSR A
  				LSR A
  				AND #%00001111
  				STA PORTB
  				LDA #(LCD_RS | SR_IDLE) 
  				STA PORTA 				; Set RS; Clear RW/E bits
  				LDA #(LCD_RS | LCD_E | SR_IDLE) 
  				STA PORTA 				; Set E bit to send instruction
  				LDA #(LCD_RS | SR_IDLE) 
  				STA PORTA 				; Clear E bits
  				PLA 					; Then send 4 LSB
  				AND #%00001111
  				STA PORTB
  				LDA #(LCD_RS | LCD_E | SR_IDLE) 
  				STA PORTA 				; Set E bit to send instruction
  				LDA #(LCD_RS | SR_IDLE) 
  				STA PORTA 				; Clear E bits
  				RTS


;-------------------------------------------------------------------------
;  Subroutine to print a 3-digit integer to LCD
;-------------------------------------------------------------------------

LCD_P_INT3:		LDX #0 					; 2nd (10ths) digit in accumulator X
  				LDY #0					; 3rd (100ths) digit in accumulator Y

d100_3:			CMP #100 				; Is A larger or equal than 100?
  				BCS sub100_3

d10_3:			CMP #10					; Is A larger or equal than 10?
  				BCS sub10_3
  				PHA
  				TYA
  				ORA #LCD_NUM_MASK
  				JSR LCD_PRINT
  				TXA
  				ORA #LCD_NUM_MASK
  				JSR LCD_PRINT
  				PLA
  				ORA #LCD_NUM_MASK
  				JSR LCD_PRINT
  				RTS

sub10_3:		SBC #10
  				INX
  				JMP d10_3

sub100_3:		SBC #100
  				INY
  				JMP d100_3


;-------------------------------------------------------------------------
;  Subroutine to print a 2-digit integer to LCD
;-------------------------------------------------------------------------

LCD_P_INT2: 	LDX #0 					; 2nd (10ths) digit in accumulator X

d10_2:			CMP #10					; Is A larger or equal than 10?
  				BCS sub10_2
  				PHA
  				TXA
  				ORA #LCD_NUM_MASK
  				JSR LCD_PRINT
  				PLA
  				ORA #LCD_NUM_MASK
  				JSR LCD_PRINT
  				RTS

sub10_2:		SBC #10
  				INX
  				JMP d10_2


;-------------------------------------------------------------------------
;  Subroutine to initialize LCD to 4-bit mode, set it up and clear it
;-------------------------------------------------------------------------

INIT_LCD: 		LDA #%00000011			; Put LCD into 4 bit mode
  				JSR LCD_CMD_8B
  				JSR DELAY
				
  				LDA #%00000011
  				JSR LCD_CMD_8B
  				JSR DELAY
				
  				LDA #%00000011
  				JSR LCD_CMD_8B
  				JSR DELAY
				
  				LDA #%00000010
  				JSR LCD_CMD_8B	
  				JSR DELAY
				
  				; LCD is now in 4 bit mode, continue init
  				LDA #%00101000 			; Function set - 4 bit, 2 line, 5x8 font
  				JSR LCD_CMD_4B	
  				JSR WAIT_LCD 			; LCD is busy after op
					
  				LDA #%00001110			; Display control - display on, cursor on, blink off
  				JSR LCD_CMD_4B	
  				JSR WAIT_LCD 			; LCD is busy after op
					
  				LDA #%00000110			; Entry mode set - increment and shift cursor, don't shift display
  				JSR LCD_CMD_4B	
  				JSR WAIT_LCD 			; LCD is busy after op
					
  				LDA #%00000001			; Clear display
  				JSR LCD_CMD_4B	
  				JSR WAIT_LCD 			; LCD is busy after op
  				RTS


;-------------------------------------------------------------------------
;  String storage
;-------------------------------------------------------------------------

titlestring:
  db "Temp:  Uptime:                          ",255

wstring:
  db "Juha Koljonen",255


;-------------------------------------------------------------------------
;  Lookup tables
;-------------------------------------------------------------------------

LUT_ADC_int:
  db 0,0,0,0,0,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8,9,9,9,9,9,10,10,10,10,10,11,11,11,11,11,12,12,12,12,12,13,13,13,13,13,14,14,14,14,14,15,15,15,15,15,16,16,16,16,16,17,17,17,17,17,18,18,18,18,18,19,19,19,19,19,20,20,20,20,20,21,21,21,21,21,22,22,22,22,22,23,23,23,23,23,24,24,24,24,24,25,25,25,25,25,26,26,26,26,26,27,27,27,27,27,28,28,28,28,28,29,29,29,29,29,30,30,30,30,30,31,31,31,31,31,32,32,32,32,32,33,33,33,33,33,34,34,34,34,34,35,35,35,35,35,36,36,36,36,36,37,37,37,37,37,38,38,38,38,38,39,39,39,39,39,40,40,40,40,40,41,41,41,41,41,42,42,42,42,42,43,43,43,43,43,44,44,44,44,44,45,45,45,45,45,46,46,46,46,46,47,47,47,47,47,48,48,48,48,48,49,49,49,49,49,50,50,50,50,50,51

LUT_ADC_dec:
  db 0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0,1,4,6,8,0,1,4,6,8,0,1,4,6,8,0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0,2,3,6,8,0,2,3,6,8,0,2,3,6,8,0,2,3,6,8,0,2,3,6,8,0,2,3,6,8,0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0,2,4,6,8,0


;-------------------------------------------------------------------------
;  65c02 CPU vectors
;-------------------------------------------------------------------------

				.org   $fffa  			; Insert at $FFFA
NMIVEC: 		.word  NMI  			; Make the NMI vector point to NMI ISR
RESVEC: 		.word  RESET    		; Make the reset vector point to the reset routine
IRQVEC: 		.word  IRQ  			; Make the IRQ vector point to IRQ ISR
